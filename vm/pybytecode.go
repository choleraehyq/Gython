package vm

type PyOpCode int

const (
	STOP_CODE PyOpCode = iota
	NOP
	POP_TOP
	ROT_TWO
	ROT_THREE
	DUP_TOP
	DUP_TOP_TWO
	UNARY_POSITIVE
	UNARY_NEGATIVE
	UNARY_NOT
	UNARY_INVERT
	GET_ITER
	BINARY_POWER
	BINARY_MULTIPLY
	BINARY_FLOOR_DIVIDE
	BINARY_TRUE_DIVIDE
	BINARY_MODULO
	BINARY_ADD
	BINARY_SUBTRACT
	BINARY_SUBSCR
	BINARY_LSHIFT
	BINARY_RSHIFT
	BINARY_AND
	BINARY_XOR
	BINARY_OR
	INPLACE_POWER
	INPLACE_MULTIPLY
	INPLACE_FLOOR_DIVIDE
	INPLACE_TRUE_DIVIDE
	INPLACE_MODULO
	INPLACE_ADD
	INPLACE_SUBTRACT
	INPLACE_LSHIFT
	INPLACE_RSHIFT
	INPLACE_AND
	INPLACE_XOR
	INPLACE_OR
	STORE_SUBSCR
	DELETE_SUBSCR
	PRINT_EXPR
	BREAK_LOOP
	CONTINUE_LOOP
	SET_ADD
	LIST_APPEND
	MAP_ADD
	RETURN_VALUE
	YIELD_VALUE
	IMPORT_STAR
	POP_BLOCK
	POP_EXCEPT
	END_FINALLY
	LOAD_BUILD_CLASS
	SETUP_WITH
	WITH_CLEANUP
	STORE_LOCALS
	STORE_NAME
	DELETE_NAME
	UNPACK_SEQUENCE
	UNPACK_EX
	STORE_ATTR
	DELETE_ATTR
	STORE_GLOBAL
	DELETE_GLOBAL
	LOAD_CONST
	LOAD_NAME
	BUILD_TUPLE
	SELECT_TUPLE
	BUILD_LIST
	BUILD_SET
	BUILD_MAP
	LOAD_ATTR
	COMPARE_OP
	IMPORT_NAME
	IMPORT_FROM
	JUMP_FORWARD
	POP_JUMP_IF_TRUE
	POP_JUMP_IF_FALSE
	JUMP_IF_TRUE_OR_POP
	JUMP_IF_FALSE_OR_POP
	JUMP_ABSOLUTE
	FOR_ITER
	LOAD_GLOBAL
	SETUP_LOOP
	SETUP_EXCEPT
	SETUP_FINALLY
	STORE_MAP
	LOAD_FAST
	STORE_FAST
	DELETE_FAST
	LOAD_CLOSURE
	LOAD_DEREF
	STORE_DEREF
	DELETE_DEREF
	RAISE_VARARGS
	CALL_FUNCTION
	MAKE_FUNCTION
	MAKE_CLOSURE
	BUILD_SLICE
	EXTENDED_ARG
	CALL_FUNCTION_VAR
	CALL_FUNCTION_KW
	CALL_FUNCTION_VAR_KW
	HAVE_ARGUMENT
)

var opIndex map[string]PyOpCode
var cmpOp []string

var opName []string

type PyByteCode struct {
	opcode  PyOpCode
	operand int
	label   string
}

func NewPyByteCode(opcode PyOpCode, operand int) *PyByteCode {
	return &PyByteCode{
		opcode:  opcode,
		operand: operand,
	}
}

func getInstrIdx(opName string) PyOpCode {
	if ret, ok := opIndex[opName]; ok {
		return ret
	} else {
		panic("Unsupported instruction: " + opName)
	}
}
